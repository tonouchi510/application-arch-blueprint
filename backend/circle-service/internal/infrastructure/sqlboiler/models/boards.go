// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Board is an object representing the database table.
type Board struct {
	UUID       string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	CircleUUID string    `boil:"circle_uuid" json:"circle_uuid" toml:"circle_uuid" yaml:"circle_uuid"`
	OwnerID    string    `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Topic      string    `boil:"topic" json:"topic" toml:"topic" yaml:"topic"`
	Status     int16     `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *boardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L boardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BoardColumns = struct {
	UUID       string
	CircleUUID string
	OwnerID    string
	Topic      string
	Status     string
	CreatedAt  string
	UpdatedAt  string
}{
	UUID:       "uuid",
	CircleUUID: "circle_uuid",
	OwnerID:    "owner_id",
	Topic:      "topic",
	Status:     "status",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var BoardTableColumns = struct {
	UUID       string
	CircleUUID string
	OwnerID    string
	Topic      string
	Status     string
	CreatedAt  string
	UpdatedAt  string
}{
	UUID:       "boards.uuid",
	CircleUUID: "boards.circle_uuid",
	OwnerID:    "boards.owner_id",
	Topic:      "boards.topic",
	Status:     "boards.status",
	CreatedAt:  "boards.created_at",
	UpdatedAt:  "boards.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BoardWhere = struct {
	UUID       whereHelperstring
	CircleUUID whereHelperstring
	OwnerID    whereHelperstring
	Topic      whereHelperstring
	Status     whereHelperint16
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	UUID:       whereHelperstring{field: "\"boards\".\"uuid\""},
	CircleUUID: whereHelperstring{field: "\"boards\".\"circle_uuid\""},
	OwnerID:    whereHelperstring{field: "\"boards\".\"owner_id\""},
	Topic:      whereHelperstring{field: "\"boards\".\"topic\""},
	Status:     whereHelperint16{field: "\"boards\".\"status\""},
	CreatedAt:  whereHelpertime_Time{field: "\"boards\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"boards\".\"updated_at\""},
}

// BoardRels is where relationship names are stored.
var BoardRels = struct {
	Circle string
	Owner  string
	Posts  string
}{
	Circle: "Circle",
	Owner:  "Owner",
	Posts:  "Posts",
}

// boardR is where relationships are stored.
type boardR struct {
	Circle *Circle   `boil:"Circle" json:"Circle" toml:"Circle" yaml:"Circle"`
	Owner  *User     `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Posts  PostSlice `boil:"Posts" json:"Posts" toml:"Posts" yaml:"Posts"`
}

// NewStruct creates a new relationship struct
func (*boardR) NewStruct() *boardR {
	return &boardR{}
}

func (o *Board) GetCircle() *Circle {
	if o == nil {
		return nil
	}

	return o.R.GetCircle()
}

func (r *boardR) GetCircle() *Circle {
	if r == nil {
		return nil
	}

	return r.Circle
}

func (o *Board) GetOwner() *User {
	if o == nil {
		return nil
	}

	return o.R.GetOwner()
}

func (r *boardR) GetOwner() *User {
	if r == nil {
		return nil
	}

	return r.Owner
}

func (o *Board) GetPosts() PostSlice {
	if o == nil {
		return nil
	}

	return o.R.GetPosts()
}

func (r *boardR) GetPosts() PostSlice {
	if r == nil {
		return nil
	}

	return r.Posts
}

// boardL is where Load methods for each relationship are stored.
type boardL struct{}

var (
	boardAllColumns            = []string{"uuid", "circle_uuid", "owner_id", "topic", "status", "created_at", "updated_at"}
	boardColumnsWithoutDefault = []string{"uuid", "circle_uuid", "owner_id", "topic", "status"}
	boardColumnsWithDefault    = []string{"created_at", "updated_at"}
	boardPrimaryKeyColumns     = []string{"uuid"}
	boardGeneratedColumns      = []string{}
)

type (
	// BoardSlice is an alias for a slice of pointers to Board.
	// This should almost always be used instead of []Board.
	BoardSlice []*Board
	// BoardHook is the signature for custom Board hook methods
	BoardHook func(context.Context, boil.ContextExecutor, *Board) error

	boardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	boardType                 = reflect.TypeOf(&Board{})
	boardMapping              = queries.MakeStructMapping(boardType)
	boardPrimaryKeyMapping, _ = queries.BindMapping(boardType, boardMapping, boardPrimaryKeyColumns)
	boardInsertCacheMut       sync.RWMutex
	boardInsertCache          = make(map[string]insertCache)
	boardUpdateCacheMut       sync.RWMutex
	boardUpdateCache          = make(map[string]updateCache)
	boardUpsertCacheMut       sync.RWMutex
	boardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var boardAfterSelectMu sync.Mutex
var boardAfterSelectHooks []BoardHook

var boardBeforeInsertMu sync.Mutex
var boardBeforeInsertHooks []BoardHook
var boardAfterInsertMu sync.Mutex
var boardAfterInsertHooks []BoardHook

var boardBeforeUpdateMu sync.Mutex
var boardBeforeUpdateHooks []BoardHook
var boardAfterUpdateMu sync.Mutex
var boardAfterUpdateHooks []BoardHook

var boardBeforeDeleteMu sync.Mutex
var boardBeforeDeleteHooks []BoardHook
var boardAfterDeleteMu sync.Mutex
var boardAfterDeleteHooks []BoardHook

var boardBeforeUpsertMu sync.Mutex
var boardBeforeUpsertHooks []BoardHook
var boardAfterUpsertMu sync.Mutex
var boardAfterUpsertHooks []BoardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Board) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Board) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Board) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Board) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Board) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Board) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Board) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Board) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Board) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range boardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBoardHook registers your hook function for all future operations.
func AddBoardHook(hookPoint boil.HookPoint, boardHook BoardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		boardAfterSelectMu.Lock()
		boardAfterSelectHooks = append(boardAfterSelectHooks, boardHook)
		boardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		boardBeforeInsertMu.Lock()
		boardBeforeInsertHooks = append(boardBeforeInsertHooks, boardHook)
		boardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		boardAfterInsertMu.Lock()
		boardAfterInsertHooks = append(boardAfterInsertHooks, boardHook)
		boardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		boardBeforeUpdateMu.Lock()
		boardBeforeUpdateHooks = append(boardBeforeUpdateHooks, boardHook)
		boardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		boardAfterUpdateMu.Lock()
		boardAfterUpdateHooks = append(boardAfterUpdateHooks, boardHook)
		boardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		boardBeforeDeleteMu.Lock()
		boardBeforeDeleteHooks = append(boardBeforeDeleteHooks, boardHook)
		boardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		boardAfterDeleteMu.Lock()
		boardAfterDeleteHooks = append(boardAfterDeleteHooks, boardHook)
		boardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		boardBeforeUpsertMu.Lock()
		boardBeforeUpsertHooks = append(boardBeforeUpsertHooks, boardHook)
		boardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		boardAfterUpsertMu.Lock()
		boardAfterUpsertHooks = append(boardAfterUpsertHooks, boardHook)
		boardAfterUpsertMu.Unlock()
	}
}

// OneG returns a single board record from the query using the global executor.
func (q boardQuery) OneG(ctx context.Context) (*Board, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single board record from the query.
func (q boardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Board, error) {
	o := &Board{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for boards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Board records from the query using the global executor.
func (q boardQuery) AllG(ctx context.Context) (BoardSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Board records from the query.
func (q boardQuery) All(ctx context.Context, exec boil.ContextExecutor) (BoardSlice, error) {
	var o []*Board

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Board slice")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Board records in the query using the global executor
func (q boardQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Board records in the query.
func (q boardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count boards rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q boardQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q boardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if boards exists")
	}

	return count > 0, nil
}

// Circle pointed to by the foreign key.
func (o *Board) Circle(mods ...qm.QueryMod) circleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.CircleUUID),
	}

	queryMods = append(queryMods, mods...)

	return Circles(queryMods...)
}

// Owner pointed to by the foreign key.
func (o *Board) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Posts retrieves all the post's Posts with an executor.
func (o *Board) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"board_uuid\"=?", o.UUID),
	)

	return Posts(queryMods...)
}

// LoadCircle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (boardL) LoadCircle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBoard interface{}, mods queries.Applicator) error {
	var slice []*Board
	var object *Board

	if singular {
		var ok bool
		object, ok = maybeBoard.(*Board)
		if !ok {
			object = new(Board)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBoard))
			}
		}
	} else {
		s, ok := maybeBoard.(*[]*Board)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBoard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &boardR{}
		}
		args[object.CircleUUID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &boardR{}
			}

			args[obj.CircleUUID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`circles`),
		qm.WhereIn(`circles.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Circle")
	}

	var resultSlice []*Circle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Circle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for circles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circles")
	}

	if len(circleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Circle = foreign
		if foreign.R == nil {
			foreign.R = &circleR{}
		}
		foreign.R.Boards = append(foreign.R.Boards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CircleUUID == foreign.UUID {
				local.R.Circle = foreign
				if foreign.R == nil {
					foreign.R = &circleR{}
				}
				foreign.R.Boards = append(foreign.R.Boards, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (boardL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBoard interface{}, mods queries.Applicator) error {
	var slice []*Board
	var object *Board

	if singular {
		var ok bool
		object, ok = maybeBoard.(*Board)
		if !ok {
			object = new(Board)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBoard))
			}
		}
	} else {
		s, ok := maybeBoard.(*[]*Board)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBoard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &boardR{}
		}
		args[object.OwnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &boardR{}
			}

			args[obj.OwnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerBoards = append(foreign.R.OwnerBoards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerBoards = append(foreign.R.OwnerBoards, local)
				break
			}
		}
	}

	return nil
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (boardL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBoard interface{}, mods queries.Applicator) error {
	var slice []*Board
	var object *Board

	if singular {
		var ok bool
		object, ok = maybeBoard.(*Board)
		if !ok {
			object = new(Board)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBoard))
			}
		}
	} else {
		s, ok := maybeBoard.(*[]*Board)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBoard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBoard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &boardR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &boardR{}
			}
			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.board_uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Board = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UUID == foreign.BoardUUID {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Board = local
				break
			}
		}
	}

	return nil
}

// SetCircleG of the board to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.Boards.
// Uses the global database handle.
func (o *Board) SetCircleG(ctx context.Context, insert bool, related *Circle) error {
	return o.SetCircle(ctx, boil.GetContextDB(), insert, related)
}

// SetCircle of the board to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.Boards.
func (o *Board) SetCircle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Circle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"boards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, boardPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CircleUUID = related.UUID
	if o.R == nil {
		o.R = &boardR{
			Circle: related,
		}
	} else {
		o.R.Circle = related
	}

	if related.R == nil {
		related.R = &circleR{
			Boards: BoardSlice{o},
		}
	} else {
		related.R.Boards = append(related.R.Boards, o)
	}

	return nil
}

// SetOwnerG of the board to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerBoards.
// Uses the global database handle.
func (o *Board) SetOwnerG(ctx context.Context, insert bool, related *User) error {
	return o.SetOwner(ctx, boil.GetContextDB(), insert, related)
}

// SetOwner of the board to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerBoards.
func (o *Board) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"boards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, boardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &boardR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerBoards: BoardSlice{o},
		}
	} else {
		related.R.OwnerBoards = append(related.R.OwnerBoards, o)
	}

	return nil
}

// AddPostsG adds the given related objects to the existing relationships
// of the board, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Board appropriately.
// Uses the global database handle.
func (o *Board) AddPostsG(ctx context.Context, insert bool, related ...*Post) error {
	return o.AddPosts(ctx, boil.GetContextDB(), insert, related...)
}

// AddPosts adds the given related objects to the existing relationships
// of the board, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Board appropriately.
func (o *Board) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BoardUUID = o.UUID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"board_uuid"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.UUID, rel.UUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BoardUUID = o.UUID
		}
	}

	if o.R == nil {
		o.R = &boardR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Board: o,
			}
		} else {
			rel.R.Board = o
		}
	}
	return nil
}

// Boards retrieves all the records using an executor.
func Boards(mods ...qm.QueryMod) boardQuery {
	mods = append(mods, qm.From("\"boards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"boards\".*"})
	}

	return boardQuery{q}
}

// FindBoardG retrieves a single record by ID.
func FindBoardG(ctx context.Context, uUID string, selectCols ...string) (*Board, error) {
	return FindBoard(ctx, boil.GetContextDB(), uUID, selectCols...)
}

// FindBoard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBoard(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*Board, error) {
	boardObj := &Board{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"boards\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, boardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from boards")
	}

	if err = boardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return boardObj, err
	}

	return boardObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Board) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Board) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no boards provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(boardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	boardInsertCacheMut.RLock()
	cache, cached := boardInsertCache[key]
	boardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			boardAllColumns,
			boardColumnsWithDefault,
			boardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(boardType, boardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(boardType, boardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"boards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"boards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into boards")
	}

	if !cached {
		boardInsertCacheMut.Lock()
		boardInsertCache[key] = cache
		boardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Board record using the global executor.
// See Update for more documentation.
func (o *Board) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Board.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Board) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	boardUpdateCacheMut.RLock()
	cache, cached := boardUpdateCache[key]
	boardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			boardAllColumns,
			boardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update boards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"boards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, boardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(boardType, boardMapping, append(wl, boardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update boards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for boards")
	}

	if !cached {
		boardUpdateCacheMut.Lock()
		boardUpdateCache[key] = cache
		boardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q boardQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q boardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for boards")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BoardSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BoardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), boardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"boards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, boardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in board slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all board")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Board) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Board) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no boards provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(boardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	boardUpsertCacheMut.RLock()
	cache, cached := boardUpsertCache[key]
	boardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			boardAllColumns,
			boardColumnsWithDefault,
			boardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			boardAllColumns,
			boardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert boards, could not build update column list")
		}

		ret := strmangle.SetComplement(boardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(boardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert boards, could not build conflict column list")
			}

			conflict = make([]string, len(boardPrimaryKeyColumns))
			copy(conflict, boardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"boards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(boardType, boardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(boardType, boardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert boards")
	}

	if !cached {
		boardUpsertCacheMut.Lock()
		boardUpsertCache[key] = cache
		boardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Board record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Board) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Board record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Board) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Board provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), boardPrimaryKeyMapping)
	sql := "DELETE FROM \"boards\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for boards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q boardQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q boardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no boardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from boards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for boards")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BoardSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BoardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(boardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), boardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"boards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, boardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from board slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for boards")
	}

	if len(boardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Board) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Board provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Board) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBoard(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BoardSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BoardSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BoardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BoardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), boardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"boards\".* FROM \"boards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, boardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BoardSlice")
	}

	*o = slice

	return nil
}

// BoardExistsG checks if the Board row exists.
func BoardExistsG(ctx context.Context, uUID string) (bool, error) {
	return BoardExists(ctx, boil.GetContextDB(), uUID)
}

// BoardExists checks if the Board row exists.
func BoardExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"boards\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if boards exists")
	}

	return exists, nil
}

// Exists checks if the Board row exists.
func (o *Board) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BoardExists(ctx, exec, o.UUID)
}

// BulkInsert inserts all rows with the specified column values, using an executor.
func (o BoardSlice) BulkInsert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(boardColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			boardAllColumns,
			boardColumnsWithDefault,
			boardColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO \"boards\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(boardType, boardMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into boards")
	}

	return nil
}
