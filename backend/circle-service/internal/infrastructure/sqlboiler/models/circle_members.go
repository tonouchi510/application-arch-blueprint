// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CircleMember is an object representing the database table.
type CircleMember struct {
	UUID       string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	CircleUUID string    `boil:"circle_uuid" json:"circle_uuid" toml:"circle_uuid" yaml:"circle_uuid"`
	UserID     string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	JoinedDate time.Time `boil:"joined_date" json:"joined_date" toml:"joined_date" yaml:"joined_date"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *circleMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L circleMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CircleMemberColumns = struct {
	UUID       string
	CircleUUID string
	UserID     string
	JoinedDate string
	CreatedAt  string
	UpdatedAt  string
}{
	UUID:       "uuid",
	CircleUUID: "circle_uuid",
	UserID:     "user_id",
	JoinedDate: "joined_date",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var CircleMemberTableColumns = struct {
	UUID       string
	CircleUUID string
	UserID     string
	JoinedDate string
	CreatedAt  string
	UpdatedAt  string
}{
	UUID:       "circle_members.uuid",
	CircleUUID: "circle_members.circle_uuid",
	UserID:     "circle_members.user_id",
	JoinedDate: "circle_members.joined_date",
	CreatedAt:  "circle_members.created_at",
	UpdatedAt:  "circle_members.updated_at",
}

// Generated where

var CircleMemberWhere = struct {
	UUID       whereHelperstring
	CircleUUID whereHelperstring
	UserID     whereHelperstring
	JoinedDate whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	UUID:       whereHelperstring{field: "\"circle_members\".\"uuid\""},
	CircleUUID: whereHelperstring{field: "\"circle_members\".\"circle_uuid\""},
	UserID:     whereHelperstring{field: "\"circle_members\".\"user_id\""},
	JoinedDate: whereHelpertime_Time{field: "\"circle_members\".\"joined_date\""},
	CreatedAt:  whereHelpertime_Time{field: "\"circle_members\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"circle_members\".\"updated_at\""},
}

// CircleMemberRels is where relationship names are stored.
var CircleMemberRels = struct {
	Circle string
	User   string
}{
	Circle: "Circle",
	User:   "User",
}

// circleMemberR is where relationships are stored.
type circleMemberR struct {
	Circle *Circle `boil:"Circle" json:"Circle" toml:"Circle" yaml:"Circle"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*circleMemberR) NewStruct() *circleMemberR {
	return &circleMemberR{}
}

func (o *CircleMember) GetCircle() *Circle {
	if o == nil {
		return nil
	}

	return o.R.GetCircle()
}

func (r *circleMemberR) GetCircle() *Circle {
	if r == nil {
		return nil
	}

	return r.Circle
}

func (o *CircleMember) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *circleMemberR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// circleMemberL is where Load methods for each relationship are stored.
type circleMemberL struct{}

var (
	circleMemberAllColumns            = []string{"uuid", "circle_uuid", "user_id", "joined_date", "created_at", "updated_at"}
	circleMemberColumnsWithoutDefault = []string{"uuid", "circle_uuid", "user_id", "joined_date"}
	circleMemberColumnsWithDefault    = []string{"created_at", "updated_at"}
	circleMemberPrimaryKeyColumns     = []string{"uuid"}
	circleMemberGeneratedColumns      = []string{}
)

type (
	// CircleMemberSlice is an alias for a slice of pointers to CircleMember.
	// This should almost always be used instead of []CircleMember.
	CircleMemberSlice []*CircleMember
	// CircleMemberHook is the signature for custom CircleMember hook methods
	CircleMemberHook func(context.Context, boil.ContextExecutor, *CircleMember) error

	circleMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	circleMemberType                 = reflect.TypeOf(&CircleMember{})
	circleMemberMapping              = queries.MakeStructMapping(circleMemberType)
	circleMemberPrimaryKeyMapping, _ = queries.BindMapping(circleMemberType, circleMemberMapping, circleMemberPrimaryKeyColumns)
	circleMemberInsertCacheMut       sync.RWMutex
	circleMemberInsertCache          = make(map[string]insertCache)
	circleMemberUpdateCacheMut       sync.RWMutex
	circleMemberUpdateCache          = make(map[string]updateCache)
	circleMemberUpsertCacheMut       sync.RWMutex
	circleMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var circleMemberAfterSelectMu sync.Mutex
var circleMemberAfterSelectHooks []CircleMemberHook

var circleMemberBeforeInsertMu sync.Mutex
var circleMemberBeforeInsertHooks []CircleMemberHook
var circleMemberAfterInsertMu sync.Mutex
var circleMemberAfterInsertHooks []CircleMemberHook

var circleMemberBeforeUpdateMu sync.Mutex
var circleMemberBeforeUpdateHooks []CircleMemberHook
var circleMemberAfterUpdateMu sync.Mutex
var circleMemberAfterUpdateHooks []CircleMemberHook

var circleMemberBeforeDeleteMu sync.Mutex
var circleMemberBeforeDeleteHooks []CircleMemberHook
var circleMemberAfterDeleteMu sync.Mutex
var circleMemberAfterDeleteHooks []CircleMemberHook

var circleMemberBeforeUpsertMu sync.Mutex
var circleMemberBeforeUpsertHooks []CircleMemberHook
var circleMemberAfterUpsertMu sync.Mutex
var circleMemberAfterUpsertHooks []CircleMemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CircleMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CircleMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CircleMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CircleMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CircleMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CircleMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CircleMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CircleMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CircleMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCircleMemberHook registers your hook function for all future operations.
func AddCircleMemberHook(hookPoint boil.HookPoint, circleMemberHook CircleMemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		circleMemberAfterSelectMu.Lock()
		circleMemberAfterSelectHooks = append(circleMemberAfterSelectHooks, circleMemberHook)
		circleMemberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		circleMemberBeforeInsertMu.Lock()
		circleMemberBeforeInsertHooks = append(circleMemberBeforeInsertHooks, circleMemberHook)
		circleMemberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		circleMemberAfterInsertMu.Lock()
		circleMemberAfterInsertHooks = append(circleMemberAfterInsertHooks, circleMemberHook)
		circleMemberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		circleMemberBeforeUpdateMu.Lock()
		circleMemberBeforeUpdateHooks = append(circleMemberBeforeUpdateHooks, circleMemberHook)
		circleMemberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		circleMemberAfterUpdateMu.Lock()
		circleMemberAfterUpdateHooks = append(circleMemberAfterUpdateHooks, circleMemberHook)
		circleMemberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		circleMemberBeforeDeleteMu.Lock()
		circleMemberBeforeDeleteHooks = append(circleMemberBeforeDeleteHooks, circleMemberHook)
		circleMemberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		circleMemberAfterDeleteMu.Lock()
		circleMemberAfterDeleteHooks = append(circleMemberAfterDeleteHooks, circleMemberHook)
		circleMemberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		circleMemberBeforeUpsertMu.Lock()
		circleMemberBeforeUpsertHooks = append(circleMemberBeforeUpsertHooks, circleMemberHook)
		circleMemberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		circleMemberAfterUpsertMu.Lock()
		circleMemberAfterUpsertHooks = append(circleMemberAfterUpsertHooks, circleMemberHook)
		circleMemberAfterUpsertMu.Unlock()
	}
}

// OneG returns a single circleMember record from the query using the global executor.
func (q circleMemberQuery) OneG(ctx context.Context) (*CircleMember, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single circleMember record from the query.
func (q circleMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CircleMember, error) {
	o := &CircleMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for circle_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CircleMember records from the query using the global executor.
func (q circleMemberQuery) AllG(ctx context.Context) (CircleMemberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CircleMember records from the query.
func (q circleMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (CircleMemberSlice, error) {
	var o []*CircleMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CircleMember slice")
	}

	if len(circleMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CircleMember records in the query using the global executor
func (q circleMemberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CircleMember records in the query.
func (q circleMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count circle_members rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q circleMemberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q circleMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if circle_members exists")
	}

	return count > 0, nil
}

// Circle pointed to by the foreign key.
func (o *CircleMember) Circle(mods ...qm.QueryMod) circleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.CircleUUID),
	}

	queryMods = append(queryMods, mods...)

	return Circles(queryMods...)
}

// User pointed to by the foreign key.
func (o *CircleMember) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCircle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circleMemberL) LoadCircle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircleMember interface{}, mods queries.Applicator) error {
	var slice []*CircleMember
	var object *CircleMember

	if singular {
		var ok bool
		object, ok = maybeCircleMember.(*CircleMember)
		if !ok {
			object = new(CircleMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircleMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircleMember))
			}
		}
	} else {
		s, ok := maybeCircleMember.(*[]*CircleMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircleMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircleMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleMemberR{}
		}
		args[object.CircleUUID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleMemberR{}
			}

			args[obj.CircleUUID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`circles`),
		qm.WhereIn(`circles.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Circle")
	}

	var resultSlice []*Circle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Circle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for circles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circles")
	}

	if len(circleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Circle = foreign
		if foreign.R == nil {
			foreign.R = &circleR{}
		}
		foreign.R.CircleMembers = append(foreign.R.CircleMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CircleUUID == foreign.UUID {
				local.R.Circle = foreign
				if foreign.R == nil {
					foreign.R = &circleR{}
				}
				foreign.R.CircleMembers = append(foreign.R.CircleMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circleMemberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircleMember interface{}, mods queries.Applicator) error {
	var slice []*CircleMember
	var object *CircleMember

	if singular {
		var ok bool
		object, ok = maybeCircleMember.(*CircleMember)
		if !ok {
			object = new(CircleMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircleMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircleMember))
			}
		}
	} else {
		s, ok := maybeCircleMember.(*[]*CircleMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircleMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircleMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleMemberR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleMemberR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CircleMembers = append(foreign.R.CircleMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CircleMembers = append(foreign.R.CircleMembers, local)
				break
			}
		}
	}

	return nil
}

// SetCircleG of the circleMember to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.CircleMembers.
// Uses the global database handle.
func (o *CircleMember) SetCircleG(ctx context.Context, insert bool, related *Circle) error {
	return o.SetCircle(ctx, boil.GetContextDB(), insert, related)
}

// SetCircle of the circleMember to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.CircleMembers.
func (o *CircleMember) SetCircle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Circle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"circle_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, circleMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CircleUUID = related.UUID
	if o.R == nil {
		o.R = &circleMemberR{
			Circle: related,
		}
	} else {
		o.R.Circle = related
	}

	if related.R == nil {
		related.R = &circleR{
			CircleMembers: CircleMemberSlice{o},
		}
	} else {
		related.R.CircleMembers = append(related.R.CircleMembers, o)
	}

	return nil
}

// SetUserG of the circleMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CircleMembers.
// Uses the global database handle.
func (o *CircleMember) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the circleMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CircleMembers.
func (o *CircleMember) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"circle_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, circleMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &circleMemberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CircleMembers: CircleMemberSlice{o},
		}
	} else {
		related.R.CircleMembers = append(related.R.CircleMembers, o)
	}

	return nil
}

// CircleMembers retrieves all the records using an executor.
func CircleMembers(mods ...qm.QueryMod) circleMemberQuery {
	mods = append(mods, qm.From("\"circle_members\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"circle_members\".*"})
	}

	return circleMemberQuery{q}
}

// FindCircleMemberG retrieves a single record by ID.
func FindCircleMemberG(ctx context.Context, uUID string, selectCols ...string) (*CircleMember, error) {
	return FindCircleMember(ctx, boil.GetContextDB(), uUID, selectCols...)
}

// FindCircleMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCircleMember(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*CircleMember, error) {
	circleMemberObj := &CircleMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"circle_members\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, circleMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from circle_members")
	}

	if err = circleMemberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return circleMemberObj, err
	}

	return circleMemberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CircleMember) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CircleMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no circle_members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	circleMemberInsertCacheMut.RLock()
	cache, cached := circleMemberInsertCache[key]
	circleMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			circleMemberAllColumns,
			circleMemberColumnsWithDefault,
			circleMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"circle_members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"circle_members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circle_members")
	}

	if !cached {
		circleMemberInsertCacheMut.Lock()
		circleMemberInsertCache[key] = cache
		circleMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CircleMember record using the global executor.
// See Update for more documentation.
func (o *CircleMember) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CircleMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CircleMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	circleMemberUpdateCacheMut.RLock()
	cache, cached := circleMemberUpdateCache[key]
	circleMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			circleMemberAllColumns,
			circleMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update circle_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"circle_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, circleMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, append(wl, circleMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update circle_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for circle_members")
	}

	if !cached {
		circleMemberUpdateCacheMut.Lock()
		circleMemberUpdateCache[key] = cache
		circleMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q circleMemberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q circleMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for circle_members")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CircleMemberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CircleMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"circle_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, circleMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in circleMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all circleMember")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CircleMember) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CircleMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no circle_members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	circleMemberUpsertCacheMut.RLock()
	cache, cached := circleMemberUpsertCache[key]
	circleMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			circleMemberAllColumns,
			circleMemberColumnsWithDefault,
			circleMemberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			circleMemberAllColumns,
			circleMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert circle_members, could not build update column list")
		}

		ret := strmangle.SetComplement(circleMemberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(circleMemberPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert circle_members, could not build conflict column list")
			}

			conflict = make([]string, len(circleMemberPrimaryKeyColumns))
			copy(conflict, circleMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"circle_members\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert circle_members")
	}

	if !cached {
		circleMemberUpsertCacheMut.Lock()
		circleMemberUpsertCache[key] = cache
		circleMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CircleMember record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CircleMember) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CircleMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CircleMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CircleMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), circleMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"circle_members\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for circle_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q circleMemberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q circleMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no circleMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_members")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CircleMemberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CircleMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(circleMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"circle_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circleMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circleMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_members")
	}

	if len(circleMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CircleMember) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CircleMember provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CircleMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCircleMember(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CircleMemberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CircleMemberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CircleMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CircleMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"circle_members\".* FROM \"circle_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circleMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CircleMemberSlice")
	}

	*o = slice

	return nil
}

// CircleMemberExistsG checks if the CircleMember row exists.
func CircleMemberExistsG(ctx context.Context, uUID string) (bool, error) {
	return CircleMemberExists(ctx, boil.GetContextDB(), uUID)
}

// CircleMemberExists checks if the CircleMember row exists.
func CircleMemberExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"circle_members\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if circle_members exists")
	}

	return exists, nil
}

// Exists checks if the CircleMember row exists.
func (o *CircleMember) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CircleMemberExists(ctx, exec, o.UUID)
}

// BulkInsert inserts all rows with the specified column values, using an executor.
func (o CircleMemberSlice) BulkInsert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(circleMemberColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			circleMemberAllColumns,
			circleMemberColumnsWithDefault,
			circleMemberColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO \"circle_members\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(circleMemberType, circleMemberMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circle_members")
	}

	return nil
}
