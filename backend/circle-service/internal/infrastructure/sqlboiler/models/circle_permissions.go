// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CirclePermission is an object representing the database table.
type CirclePermission struct {
	CircleUUID              string    `boil:"circle_uuid" json:"circle_uuid" toml:"circle_uuid" yaml:"circle_uuid"`
	PermissionBoardCreation bool      `boil:"permission_board_creation" json:"permission_board_creation" toml:"permission_board_creation" yaml:"permission_board_creation"`
	PermissionSelfJoin      bool      `boil:"permission_self_join" json:"permission_self_join" toml:"permission_self_join" yaml:"permission_self_join"`
	CreatedAt               time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *circlePermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L circlePermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CirclePermissionColumns = struct {
	CircleUUID              string
	PermissionBoardCreation string
	PermissionSelfJoin      string
	CreatedAt               string
	UpdatedAt               string
}{
	CircleUUID:              "circle_uuid",
	PermissionBoardCreation: "permission_board_creation",
	PermissionSelfJoin:      "permission_self_join",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var CirclePermissionTableColumns = struct {
	CircleUUID              string
	PermissionBoardCreation string
	PermissionSelfJoin      string
	CreatedAt               string
	UpdatedAt               string
}{
	CircleUUID:              "circle_permissions.circle_uuid",
	PermissionBoardCreation: "circle_permissions.permission_board_creation",
	PermissionSelfJoin:      "circle_permissions.permission_self_join",
	CreatedAt:               "circle_permissions.created_at",
	UpdatedAt:               "circle_permissions.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var CirclePermissionWhere = struct {
	CircleUUID              whereHelperstring
	PermissionBoardCreation whereHelperbool
	PermissionSelfJoin      whereHelperbool
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
}{
	CircleUUID:              whereHelperstring{field: "\"circle_permissions\".\"circle_uuid\""},
	PermissionBoardCreation: whereHelperbool{field: "\"circle_permissions\".\"permission_board_creation\""},
	PermissionSelfJoin:      whereHelperbool{field: "\"circle_permissions\".\"permission_self_join\""},
	CreatedAt:               whereHelpertime_Time{field: "\"circle_permissions\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"circle_permissions\".\"updated_at\""},
}

// CirclePermissionRels is where relationship names are stored.
var CirclePermissionRels = struct {
	Circle string
}{
	Circle: "Circle",
}

// circlePermissionR is where relationships are stored.
type circlePermissionR struct {
	Circle *Circle `boil:"Circle" json:"Circle" toml:"Circle" yaml:"Circle"`
}

// NewStruct creates a new relationship struct
func (*circlePermissionR) NewStruct() *circlePermissionR {
	return &circlePermissionR{}
}

func (o *CirclePermission) GetCircle() *Circle {
	if o == nil {
		return nil
	}

	return o.R.GetCircle()
}

func (r *circlePermissionR) GetCircle() *Circle {
	if r == nil {
		return nil
	}

	return r.Circle
}

// circlePermissionL is where Load methods for each relationship are stored.
type circlePermissionL struct{}

var (
	circlePermissionAllColumns            = []string{"circle_uuid", "permission_board_creation", "permission_self_join", "created_at", "updated_at"}
	circlePermissionColumnsWithoutDefault = []string{"circle_uuid", "permission_board_creation", "permission_self_join"}
	circlePermissionColumnsWithDefault    = []string{"created_at", "updated_at"}
	circlePermissionPrimaryKeyColumns     = []string{"circle_uuid"}
	circlePermissionGeneratedColumns      = []string{}
)

type (
	// CirclePermissionSlice is an alias for a slice of pointers to CirclePermission.
	// This should almost always be used instead of []CirclePermission.
	CirclePermissionSlice []*CirclePermission
	// CirclePermissionHook is the signature for custom CirclePermission hook methods
	CirclePermissionHook func(context.Context, boil.ContextExecutor, *CirclePermission) error

	circlePermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	circlePermissionType                 = reflect.TypeOf(&CirclePermission{})
	circlePermissionMapping              = queries.MakeStructMapping(circlePermissionType)
	circlePermissionPrimaryKeyMapping, _ = queries.BindMapping(circlePermissionType, circlePermissionMapping, circlePermissionPrimaryKeyColumns)
	circlePermissionInsertCacheMut       sync.RWMutex
	circlePermissionInsertCache          = make(map[string]insertCache)
	circlePermissionUpdateCacheMut       sync.RWMutex
	circlePermissionUpdateCache          = make(map[string]updateCache)
	circlePermissionUpsertCacheMut       sync.RWMutex
	circlePermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var circlePermissionAfterSelectMu sync.Mutex
var circlePermissionAfterSelectHooks []CirclePermissionHook

var circlePermissionBeforeInsertMu sync.Mutex
var circlePermissionBeforeInsertHooks []CirclePermissionHook
var circlePermissionAfterInsertMu sync.Mutex
var circlePermissionAfterInsertHooks []CirclePermissionHook

var circlePermissionBeforeUpdateMu sync.Mutex
var circlePermissionBeforeUpdateHooks []CirclePermissionHook
var circlePermissionAfterUpdateMu sync.Mutex
var circlePermissionAfterUpdateHooks []CirclePermissionHook

var circlePermissionBeforeDeleteMu sync.Mutex
var circlePermissionBeforeDeleteHooks []CirclePermissionHook
var circlePermissionAfterDeleteMu sync.Mutex
var circlePermissionAfterDeleteHooks []CirclePermissionHook

var circlePermissionBeforeUpsertMu sync.Mutex
var circlePermissionBeforeUpsertHooks []CirclePermissionHook
var circlePermissionAfterUpsertMu sync.Mutex
var circlePermissionAfterUpsertHooks []CirclePermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CirclePermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CirclePermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CirclePermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CirclePermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CirclePermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CirclePermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CirclePermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CirclePermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CirclePermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circlePermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCirclePermissionHook registers your hook function for all future operations.
func AddCirclePermissionHook(hookPoint boil.HookPoint, circlePermissionHook CirclePermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		circlePermissionAfterSelectMu.Lock()
		circlePermissionAfterSelectHooks = append(circlePermissionAfterSelectHooks, circlePermissionHook)
		circlePermissionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		circlePermissionBeforeInsertMu.Lock()
		circlePermissionBeforeInsertHooks = append(circlePermissionBeforeInsertHooks, circlePermissionHook)
		circlePermissionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		circlePermissionAfterInsertMu.Lock()
		circlePermissionAfterInsertHooks = append(circlePermissionAfterInsertHooks, circlePermissionHook)
		circlePermissionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		circlePermissionBeforeUpdateMu.Lock()
		circlePermissionBeforeUpdateHooks = append(circlePermissionBeforeUpdateHooks, circlePermissionHook)
		circlePermissionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		circlePermissionAfterUpdateMu.Lock()
		circlePermissionAfterUpdateHooks = append(circlePermissionAfterUpdateHooks, circlePermissionHook)
		circlePermissionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		circlePermissionBeforeDeleteMu.Lock()
		circlePermissionBeforeDeleteHooks = append(circlePermissionBeforeDeleteHooks, circlePermissionHook)
		circlePermissionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		circlePermissionAfterDeleteMu.Lock()
		circlePermissionAfterDeleteHooks = append(circlePermissionAfterDeleteHooks, circlePermissionHook)
		circlePermissionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		circlePermissionBeforeUpsertMu.Lock()
		circlePermissionBeforeUpsertHooks = append(circlePermissionBeforeUpsertHooks, circlePermissionHook)
		circlePermissionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		circlePermissionAfterUpsertMu.Lock()
		circlePermissionAfterUpsertHooks = append(circlePermissionAfterUpsertHooks, circlePermissionHook)
		circlePermissionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single circlePermission record from the query using the global executor.
func (q circlePermissionQuery) OneG(ctx context.Context) (*CirclePermission, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single circlePermission record from the query.
func (q circlePermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CirclePermission, error) {
	o := &CirclePermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for circle_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CirclePermission records from the query using the global executor.
func (q circlePermissionQuery) AllG(ctx context.Context) (CirclePermissionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CirclePermission records from the query.
func (q circlePermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CirclePermissionSlice, error) {
	var o []*CirclePermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CirclePermission slice")
	}

	if len(circlePermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CirclePermission records in the query using the global executor
func (q circlePermissionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CirclePermission records in the query.
func (q circlePermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count circle_permissions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q circlePermissionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q circlePermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if circle_permissions exists")
	}

	return count > 0, nil
}

// Circle pointed to by the foreign key.
func (o *CirclePermission) Circle(mods ...qm.QueryMod) circleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.CircleUUID),
	}

	queryMods = append(queryMods, mods...)

	return Circles(queryMods...)
}

// LoadCircle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circlePermissionL) LoadCircle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCirclePermission interface{}, mods queries.Applicator) error {
	var slice []*CirclePermission
	var object *CirclePermission

	if singular {
		var ok bool
		object, ok = maybeCirclePermission.(*CirclePermission)
		if !ok {
			object = new(CirclePermission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCirclePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCirclePermission))
			}
		}
	} else {
		s, ok := maybeCirclePermission.(*[]*CirclePermission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCirclePermission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCirclePermission))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circlePermissionR{}
		}
		args[object.CircleUUID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circlePermissionR{}
			}

			args[obj.CircleUUID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`circles`),
		qm.WhereIn(`circles.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Circle")
	}

	var resultSlice []*Circle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Circle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for circles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circles")
	}

	if len(circleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Circle = foreign
		if foreign.R == nil {
			foreign.R = &circleR{}
		}
		foreign.R.CirclePermission = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CircleUUID == foreign.UUID {
				local.R.Circle = foreign
				if foreign.R == nil {
					foreign.R = &circleR{}
				}
				foreign.R.CirclePermission = local
				break
			}
		}
	}

	return nil
}

// SetCircleG of the circlePermission to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.CirclePermission.
// Uses the global database handle.
func (o *CirclePermission) SetCircleG(ctx context.Context, insert bool, related *Circle) error {
	return o.SetCircle(ctx, boil.GetContextDB(), insert, related)
}

// SetCircle of the circlePermission to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.CirclePermission.
func (o *CirclePermission) SetCircle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Circle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"circle_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, circlePermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.CircleUUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CircleUUID = related.UUID
	if o.R == nil {
		o.R = &circlePermissionR{
			Circle: related,
		}
	} else {
		o.R.Circle = related
	}

	if related.R == nil {
		related.R = &circleR{
			CirclePermission: o,
		}
	} else {
		related.R.CirclePermission = o
	}

	return nil
}

// CirclePermissions retrieves all the records using an executor.
func CirclePermissions(mods ...qm.QueryMod) circlePermissionQuery {
	mods = append(mods, qm.From("\"circle_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"circle_permissions\".*"})
	}

	return circlePermissionQuery{q}
}

// FindCirclePermissionG retrieves a single record by ID.
func FindCirclePermissionG(ctx context.Context, circleUUID string, selectCols ...string) (*CirclePermission, error) {
	return FindCirclePermission(ctx, boil.GetContextDB(), circleUUID, selectCols...)
}

// FindCirclePermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCirclePermission(ctx context.Context, exec boil.ContextExecutor, circleUUID string, selectCols ...string) (*CirclePermission, error) {
	circlePermissionObj := &CirclePermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"circle_permissions\" where \"circle_uuid\"=$1", sel,
	)

	q := queries.Raw(query, circleUUID)

	err := q.Bind(ctx, exec, circlePermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from circle_permissions")
	}

	if err = circlePermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return circlePermissionObj, err
	}

	return circlePermissionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CirclePermission) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CirclePermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no circle_permissions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circlePermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	circlePermissionInsertCacheMut.RLock()
	cache, cached := circlePermissionInsertCache[key]
	circlePermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			circlePermissionAllColumns,
			circlePermissionColumnsWithDefault,
			circlePermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(circlePermissionType, circlePermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(circlePermissionType, circlePermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"circle_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"circle_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circle_permissions")
	}

	if !cached {
		circlePermissionInsertCacheMut.Lock()
		circlePermissionInsertCache[key] = cache
		circlePermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CirclePermission record using the global executor.
// See Update for more documentation.
func (o *CirclePermission) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CirclePermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CirclePermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	circlePermissionUpdateCacheMut.RLock()
	cache, cached := circlePermissionUpdateCache[key]
	circlePermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			circlePermissionAllColumns,
			circlePermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update circle_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"circle_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, circlePermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(circlePermissionType, circlePermissionMapping, append(wl, circlePermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update circle_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for circle_permissions")
	}

	if !cached {
		circlePermissionUpdateCacheMut.Lock()
		circlePermissionUpdateCache[key] = cache
		circlePermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q circlePermissionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q circlePermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for circle_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for circle_permissions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CirclePermissionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CirclePermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"circle_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, circlePermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in circlePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all circlePermission")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CirclePermission) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CirclePermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no circle_permissions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circlePermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	circlePermissionUpsertCacheMut.RLock()
	cache, cached := circlePermissionUpsertCache[key]
	circlePermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			circlePermissionAllColumns,
			circlePermissionColumnsWithDefault,
			circlePermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			circlePermissionAllColumns,
			circlePermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert circle_permissions, could not build update column list")
		}

		ret := strmangle.SetComplement(circlePermissionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(circlePermissionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert circle_permissions, could not build conflict column list")
			}

			conflict = make([]string, len(circlePermissionPrimaryKeyColumns))
			copy(conflict, circlePermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"circle_permissions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(circlePermissionType, circlePermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(circlePermissionType, circlePermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert circle_permissions")
	}

	if !cached {
		circlePermissionUpsertCacheMut.Lock()
		circlePermissionUpsertCache[key] = cache
		circlePermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CirclePermission record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CirclePermission) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CirclePermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CirclePermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CirclePermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), circlePermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"circle_permissions\" WHERE \"circle_uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from circle_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for circle_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q circlePermissionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q circlePermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no circlePermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circle_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_permissions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CirclePermissionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CirclePermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(circlePermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"circle_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circlePermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circlePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_permissions")
	}

	if len(circlePermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CirclePermission) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no CirclePermission provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CirclePermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCirclePermission(ctx, exec, o.CircleUUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CirclePermissionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CirclePermissionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CirclePermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CirclePermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"circle_permissions\".* FROM \"circle_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circlePermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CirclePermissionSlice")
	}

	*o = slice

	return nil
}

// CirclePermissionExistsG checks if the CirclePermission row exists.
func CirclePermissionExistsG(ctx context.Context, circleUUID string) (bool, error) {
	return CirclePermissionExists(ctx, boil.GetContextDB(), circleUUID)
}

// CirclePermissionExists checks if the CirclePermission row exists.
func CirclePermissionExists(ctx context.Context, exec boil.ContextExecutor, circleUUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"circle_permissions\" where \"circle_uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, circleUUID)
	}
	row := exec.QueryRowContext(ctx, sql, circleUUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if circle_permissions exists")
	}

	return exists, nil
}

// Exists checks if the CirclePermission row exists.
func (o *CirclePermission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CirclePermissionExists(ctx, exec, o.CircleUUID)
}

// BulkInsert inserts all rows with the specified column values, using an executor.
func (o CirclePermissionSlice) BulkInsert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(circlePermissionColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			circlePermissionAllColumns,
			circlePermissionColumnsWithDefault,
			circlePermissionColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO \"circle_permissions\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(circlePermissionType, circlePermissionMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circle_permissions")
	}

	return nil
}
