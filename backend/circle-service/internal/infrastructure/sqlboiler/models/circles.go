// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Circle is an object representing the database table.
type Circle struct {
	UUID        string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	OwnerID     string    `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *circleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L circleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CircleColumns = struct {
	UUID        string
	OwnerID     string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	UUID:        "uuid",
	OwnerID:     "owner_id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var CircleTableColumns = struct {
	UUID        string
	OwnerID     string
	Name        string
	Description string
	CreatedAt   string
	UpdatedAt   string
}{
	UUID:        "circles.uuid",
	OwnerID:     "circles.owner_id",
	Name:        "circles.name",
	Description: "circles.description",
	CreatedAt:   "circles.created_at",
	UpdatedAt:   "circles.updated_at",
}

// Generated where

var CircleWhere = struct {
	UUID        whereHelperstring
	OwnerID     whereHelperstring
	Name        whereHelperstring
	Description whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	UUID:        whereHelperstring{field: "\"circles\".\"uuid\""},
	OwnerID:     whereHelperstring{field: "\"circles\".\"owner_id\""},
	Name:        whereHelperstring{field: "\"circles\".\"name\""},
	Description: whereHelperstring{field: "\"circles\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"circles\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"circles\".\"updated_at\""},
}

// CircleRels is where relationship names are stored.
var CircleRels = struct {
	Owner            string
	CirclePermission string
	Boards           string
	CircleMembers    string
}{
	Owner:            "Owner",
	CirclePermission: "CirclePermission",
	Boards:           "Boards",
	CircleMembers:    "CircleMembers",
}

// circleR is where relationships are stored.
type circleR struct {
	Owner            *User             `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	CirclePermission *CirclePermission `boil:"CirclePermission" json:"CirclePermission" toml:"CirclePermission" yaml:"CirclePermission"`
	Boards           BoardSlice        `boil:"Boards" json:"Boards" toml:"Boards" yaml:"Boards"`
	CircleMembers    CircleMemberSlice `boil:"CircleMembers" json:"CircleMembers" toml:"CircleMembers" yaml:"CircleMembers"`
}

// NewStruct creates a new relationship struct
func (*circleR) NewStruct() *circleR {
	return &circleR{}
}

func (o *Circle) GetOwner() *User {
	if o == nil {
		return nil
	}

	return o.R.GetOwner()
}

func (r *circleR) GetOwner() *User {
	if r == nil {
		return nil
	}

	return r.Owner
}

func (o *Circle) GetCirclePermission() *CirclePermission {
	if o == nil {
		return nil
	}

	return o.R.GetCirclePermission()
}

func (r *circleR) GetCirclePermission() *CirclePermission {
	if r == nil {
		return nil
	}

	return r.CirclePermission
}

func (o *Circle) GetBoards() BoardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetBoards()
}

func (r *circleR) GetBoards() BoardSlice {
	if r == nil {
		return nil
	}

	return r.Boards
}

func (o *Circle) GetCircleMembers() CircleMemberSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCircleMembers()
}

func (r *circleR) GetCircleMembers() CircleMemberSlice {
	if r == nil {
		return nil
	}

	return r.CircleMembers
}

// circleL is where Load methods for each relationship are stored.
type circleL struct{}

var (
	circleAllColumns            = []string{"uuid", "owner_id", "name", "description", "created_at", "updated_at"}
	circleColumnsWithoutDefault = []string{"uuid", "owner_id", "name", "description"}
	circleColumnsWithDefault    = []string{"created_at", "updated_at"}
	circlePrimaryKeyColumns     = []string{"uuid"}
	circleGeneratedColumns      = []string{}
)

type (
	// CircleSlice is an alias for a slice of pointers to Circle.
	// This should almost always be used instead of []Circle.
	CircleSlice []*Circle
	// CircleHook is the signature for custom Circle hook methods
	CircleHook func(context.Context, boil.ContextExecutor, *Circle) error

	circleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	circleType                 = reflect.TypeOf(&Circle{})
	circleMapping              = queries.MakeStructMapping(circleType)
	circlePrimaryKeyMapping, _ = queries.BindMapping(circleType, circleMapping, circlePrimaryKeyColumns)
	circleInsertCacheMut       sync.RWMutex
	circleInsertCache          = make(map[string]insertCache)
	circleUpdateCacheMut       sync.RWMutex
	circleUpdateCache          = make(map[string]updateCache)
	circleUpsertCacheMut       sync.RWMutex
	circleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var circleAfterSelectMu sync.Mutex
var circleAfterSelectHooks []CircleHook

var circleBeforeInsertMu sync.Mutex
var circleBeforeInsertHooks []CircleHook
var circleAfterInsertMu sync.Mutex
var circleAfterInsertHooks []CircleHook

var circleBeforeUpdateMu sync.Mutex
var circleBeforeUpdateHooks []CircleHook
var circleAfterUpdateMu sync.Mutex
var circleAfterUpdateHooks []CircleHook

var circleBeforeDeleteMu sync.Mutex
var circleBeforeDeleteHooks []CircleHook
var circleAfterDeleteMu sync.Mutex
var circleAfterDeleteHooks []CircleHook

var circleBeforeUpsertMu sync.Mutex
var circleBeforeUpsertHooks []CircleHook
var circleAfterUpsertMu sync.Mutex
var circleAfterUpsertHooks []CircleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Circle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Circle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Circle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Circle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Circle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Circle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Circle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Circle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Circle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCircleHook registers your hook function for all future operations.
func AddCircleHook(hookPoint boil.HookPoint, circleHook CircleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		circleAfterSelectMu.Lock()
		circleAfterSelectHooks = append(circleAfterSelectHooks, circleHook)
		circleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		circleBeforeInsertMu.Lock()
		circleBeforeInsertHooks = append(circleBeforeInsertHooks, circleHook)
		circleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		circleAfterInsertMu.Lock()
		circleAfterInsertHooks = append(circleAfterInsertHooks, circleHook)
		circleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		circleBeforeUpdateMu.Lock()
		circleBeforeUpdateHooks = append(circleBeforeUpdateHooks, circleHook)
		circleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		circleAfterUpdateMu.Lock()
		circleAfterUpdateHooks = append(circleAfterUpdateHooks, circleHook)
		circleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		circleBeforeDeleteMu.Lock()
		circleBeforeDeleteHooks = append(circleBeforeDeleteHooks, circleHook)
		circleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		circleAfterDeleteMu.Lock()
		circleAfterDeleteHooks = append(circleAfterDeleteHooks, circleHook)
		circleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		circleBeforeUpsertMu.Lock()
		circleBeforeUpsertHooks = append(circleBeforeUpsertHooks, circleHook)
		circleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		circleAfterUpsertMu.Lock()
		circleAfterUpsertHooks = append(circleAfterUpsertHooks, circleHook)
		circleAfterUpsertMu.Unlock()
	}
}

// OneG returns a single circle record from the query using the global executor.
func (q circleQuery) OneG(ctx context.Context) (*Circle, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single circle record from the query.
func (q circleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Circle, error) {
	o := &Circle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for circles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Circle records from the query using the global executor.
func (q circleQuery) AllG(ctx context.Context) (CircleSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Circle records from the query.
func (q circleQuery) All(ctx context.Context, exec boil.ContextExecutor) (CircleSlice, error) {
	var o []*Circle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Circle slice")
	}

	if len(circleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Circle records in the query using the global executor
func (q circleQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Circle records in the query.
func (q circleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count circles rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q circleQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q circleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if circles exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Circle) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CirclePermission pointed to by the foreign key.
func (o *Circle) CirclePermission(mods ...qm.QueryMod) circlePermissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"circle_uuid\" = ?", o.UUID),
	}

	queryMods = append(queryMods, mods...)

	return CirclePermissions(queryMods...)
}

// Boards retrieves all the board's Boards with an executor.
func (o *Circle) Boards(mods ...qm.QueryMod) boardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"boards\".\"circle_uuid\"=?", o.UUID),
	)

	return Boards(queryMods...)
}

// CircleMembers retrieves all the circle_member's CircleMembers with an executor.
func (o *Circle) CircleMembers(mods ...qm.QueryMod) circleMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"circle_members\".\"circle_uuid\"=?", o.UUID),
	)

	return CircleMembers(queryMods...)
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circleL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircle interface{}, mods queries.Applicator) error {
	var slice []*Circle
	var object *Circle

	if singular {
		var ok bool
		object, ok = maybeCircle.(*Circle)
		if !ok {
			object = new(Circle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircle))
			}
		}
	} else {
		s, ok := maybeCircle.(*[]*Circle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleR{}
		}
		args[object.OwnerID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleR{}
			}

			args[obj.OwnerID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerCircles = append(foreign.R.OwnerCircles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerCircles = append(foreign.R.OwnerCircles, local)
				break
			}
		}
	}

	return nil
}

// LoadCirclePermission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (circleL) LoadCirclePermission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircle interface{}, mods queries.Applicator) error {
	var slice []*Circle
	var object *Circle

	if singular {
		var ok bool
		object, ok = maybeCircle.(*Circle)
		if !ok {
			object = new(Circle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircle))
			}
		}
	} else {
		s, ok := maybeCircle.(*[]*Circle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleR{}
			}

			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`circle_permissions`),
		qm.WhereIn(`circle_permissions.circle_uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CirclePermission")
	}

	var resultSlice []*CirclePermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CirclePermission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for circle_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circle_permissions")
	}

	if len(circlePermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CirclePermission = foreign
		if foreign.R == nil {
			foreign.R = &circlePermissionR{}
		}
		foreign.R.Circle = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UUID == foreign.CircleUUID {
				local.R.CirclePermission = foreign
				if foreign.R == nil {
					foreign.R = &circlePermissionR{}
				}
				foreign.R.Circle = local
				break
			}
		}
	}

	return nil
}

// LoadBoards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (circleL) LoadBoards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircle interface{}, mods queries.Applicator) error {
	var slice []*Circle
	var object *Circle

	if singular {
		var ok bool
		object, ok = maybeCircle.(*Circle)
		if !ok {
			object = new(Circle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircle))
			}
		}
	} else {
		s, ok := maybeCircle.(*[]*Circle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleR{}
			}
			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`boards`),
		qm.WhereIn(`boards.circle_uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load boards")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice boards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Boards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &boardR{}
			}
			foreign.R.Circle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UUID == foreign.CircleUUID {
				local.R.Boards = append(local.R.Boards, foreign)
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.Circle = local
				break
			}
		}
	}

	return nil
}

// LoadCircleMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (circleL) LoadCircleMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircle interface{}, mods queries.Applicator) error {
	var slice []*Circle
	var object *Circle

	if singular {
		var ok bool
		object, ok = maybeCircle.(*Circle)
		if !ok {
			object = new(Circle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCircle))
			}
		}
	} else {
		s, ok := maybeCircle.(*[]*Circle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCircle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCircle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &circleR{}
		}
		args[object.UUID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleR{}
			}
			args[obj.UUID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`circle_members`),
		qm.WhereIn(`circle_members.circle_uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load circle_members")
	}

	var resultSlice []*CircleMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice circle_members")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on circle_members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circle_members")
	}

	if len(circleMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CircleMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &circleMemberR{}
			}
			foreign.R.Circle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UUID == foreign.CircleUUID {
				local.R.CircleMembers = append(local.R.CircleMembers, foreign)
				if foreign.R == nil {
					foreign.R = &circleMemberR{}
				}
				foreign.R.Circle = local
				break
			}
		}
	}

	return nil
}

// SetOwnerG of the circle to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerCircles.
// Uses the global database handle.
func (o *Circle) SetOwnerG(ctx context.Context, insert bool, related *User) error {
	return o.SetOwner(ctx, boil.GetContextDB(), insert, related)
}

// SetOwner of the circle to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerCircles.
func (o *Circle) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"circles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, circlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &circleR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerCircles: CircleSlice{o},
		}
	} else {
		related.R.OwnerCircles = append(related.R.OwnerCircles, o)
	}

	return nil
}

// SetCirclePermissionG of the circle to the related item.
// Sets o.R.CirclePermission to related.
// Adds o to related.R.Circle.
// Uses the global database handle.
func (o *Circle) SetCirclePermissionG(ctx context.Context, insert bool, related *CirclePermission) error {
	return o.SetCirclePermission(ctx, boil.GetContextDB(), insert, related)
}

// SetCirclePermission of the circle to the related item.
// Sets o.R.CirclePermission to related.
// Adds o to related.R.Circle.
func (o *Circle) SetCirclePermission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CirclePermission) error {
	var err error

	if insert {
		related.CircleUUID = o.UUID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"circle_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
			strmangle.WhereClause("\"", "\"", 2, circlePermissionPrimaryKeyColumns),
		)
		values := []interface{}{o.UUID, related.CircleUUID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.CircleUUID = o.UUID
	}

	if o.R == nil {
		o.R = &circleR{
			CirclePermission: related,
		}
	} else {
		o.R.CirclePermission = related
	}

	if related.R == nil {
		related.R = &circlePermissionR{
			Circle: o,
		}
	} else {
		related.R.Circle = o
	}
	return nil
}

// AddBoardsG adds the given related objects to the existing relationships
// of the circle, optionally inserting them as new records.
// Appends related to o.R.Boards.
// Sets related.R.Circle appropriately.
// Uses the global database handle.
func (o *Circle) AddBoardsG(ctx context.Context, insert bool, related ...*Board) error {
	return o.AddBoards(ctx, boil.GetContextDB(), insert, related...)
}

// AddBoards adds the given related objects to the existing relationships
// of the circle, optionally inserting them as new records.
// Appends related to o.R.Boards.
// Sets related.R.Circle appropriately.
func (o *Circle) AddBoards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Board) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CircleUUID = o.UUID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"boards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
				strmangle.WhereClause("\"", "\"", 2, boardPrimaryKeyColumns),
			)
			values := []interface{}{o.UUID, rel.UUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CircleUUID = o.UUID
		}
	}

	if o.R == nil {
		o.R = &circleR{
			Boards: related,
		}
	} else {
		o.R.Boards = append(o.R.Boards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &boardR{
				Circle: o,
			}
		} else {
			rel.R.Circle = o
		}
	}
	return nil
}

// AddCircleMembersG adds the given related objects to the existing relationships
// of the circle, optionally inserting them as new records.
// Appends related to o.R.CircleMembers.
// Sets related.R.Circle appropriately.
// Uses the global database handle.
func (o *Circle) AddCircleMembersG(ctx context.Context, insert bool, related ...*CircleMember) error {
	return o.AddCircleMembers(ctx, boil.GetContextDB(), insert, related...)
}

// AddCircleMembers adds the given related objects to the existing relationships
// of the circle, optionally inserting them as new records.
// Appends related to o.R.CircleMembers.
// Sets related.R.Circle appropriately.
func (o *Circle) AddCircleMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CircleMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CircleUUID = o.UUID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"circle_members\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"circle_uuid"}),
				strmangle.WhereClause("\"", "\"", 2, circleMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.UUID, rel.UUID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CircleUUID = o.UUID
		}
	}

	if o.R == nil {
		o.R = &circleR{
			CircleMembers: related,
		}
	} else {
		o.R.CircleMembers = append(o.R.CircleMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &circleMemberR{
				Circle: o,
			}
		} else {
			rel.R.Circle = o
		}
	}
	return nil
}

// Circles retrieves all the records using an executor.
func Circles(mods ...qm.QueryMod) circleQuery {
	mods = append(mods, qm.From("\"circles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"circles\".*"})
	}

	return circleQuery{q}
}

// FindCircleG retrieves a single record by ID.
func FindCircleG(ctx context.Context, uUID string, selectCols ...string) (*Circle, error) {
	return FindCircle(ctx, boil.GetContextDB(), uUID, selectCols...)
}

// FindCircle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCircle(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*Circle, error) {
	circleObj := &Circle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"circles\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, circleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from circles")
	}

	if err = circleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return circleObj, err
	}

	return circleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Circle) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Circle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no circles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	circleInsertCacheMut.RLock()
	cache, cached := circleInsertCache[key]
	circleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			circleAllColumns,
			circleColumnsWithDefault,
			circleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(circleType, circleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(circleType, circleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"circles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"circles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circles")
	}

	if !cached {
		circleInsertCacheMut.Lock()
		circleInsertCache[key] = cache
		circleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Circle record using the global executor.
// See Update for more documentation.
func (o *Circle) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Circle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Circle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	circleUpdateCacheMut.RLock()
	cache, cached := circleUpdateCache[key]
	circleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			circleAllColumns,
			circlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update circles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"circles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, circlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(circleType, circleMapping, append(wl, circlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update circles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for circles")
	}

	if !cached {
		circleUpdateCacheMut.Lock()
		circleUpdateCache[key] = cache
		circleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q circleQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q circleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for circles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for circles")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CircleSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CircleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"circles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, circlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in circle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all circle")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Circle) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Circle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no circles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	circleUpsertCacheMut.RLock()
	cache, cached := circleUpsertCache[key]
	circleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			circleAllColumns,
			circleColumnsWithDefault,
			circleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			circleAllColumns,
			circlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert circles, could not build update column list")
		}

		ret := strmangle.SetComplement(circleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(circlePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert circles, could not build conflict column list")
			}

			conflict = make([]string, len(circlePrimaryKeyColumns))
			copy(conflict, circlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"circles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(circleType, circleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(circleType, circleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert circles")
	}

	if !cached {
		circleUpsertCacheMut.Lock()
		circleUpsertCache[key] = cache
		circleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Circle record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Circle) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Circle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Circle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Circle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), circlePrimaryKeyMapping)
	sql := "DELETE FROM \"circles\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from circles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for circles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q circleQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q circleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no circleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circles")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CircleSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CircleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(circleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"circles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circles")
	}

	if len(circleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Circle) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Circle provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Circle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCircle(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CircleSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CircleSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CircleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CircleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"circles\".* FROM \"circles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, circlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CircleSlice")
	}

	*o = slice

	return nil
}

// CircleExistsG checks if the Circle row exists.
func CircleExistsG(ctx context.Context, uUID string) (bool, error) {
	return CircleExists(ctx, boil.GetContextDB(), uUID)
}

// CircleExists checks if the Circle row exists.
func CircleExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"circles\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if circles exists")
	}

	return exists, nil
}

// Exists checks if the Circle row exists.
func (o *Circle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CircleExists(ctx, exec, o.UUID)
}

// BulkInsert inserts all rows with the specified column values, using an executor.
func (o CircleSlice) BulkInsert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(circleColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			circleAllColumns,
			circleColumnsWithDefault,
			circleColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO \"circles\" " + "(\"" + strings.Join(wl, "\",\"") + "\")" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(circleType, circleMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circles")
	}

	return nil
}
