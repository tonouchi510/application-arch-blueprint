// Code generated by MockGen. DO NOT EDIT.
// Source: board_service.go

// Package mock_boards is a generated GoMock package.
package mock_boards

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	boards "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/boards"
	circles "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/circles"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockIBoardDomainService is a mock of IBoardDomainService interface.
type MockIBoardDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockIBoardDomainServiceMockRecorder
}

// MockIBoardDomainServiceMockRecorder is the mock recorder for MockIBoardDomainService.
type MockIBoardDomainServiceMockRecorder struct {
	mock *MockIBoardDomainService
}

// NewMockIBoardDomainService creates a new mock instance.
func NewMockIBoardDomainService(ctrl *gomock.Controller) *MockIBoardDomainService {
	mock := &MockIBoardDomainService{ctrl: ctrl}
	mock.recorder = &MockIBoardDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBoardDomainService) EXPECT() *MockIBoardDomainServiceMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockIBoardDomainService) AddPost(ctx context.Context, board *boards.Board, post boards.Post, circle circles.Circle, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, board, post, circle, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockIBoardDomainServiceMockRecorder) AddPost(ctx, board, post, circle, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockIBoardDomainService)(nil).AddPost), ctx, board, post, circle, executor)
}
