// Code generated by MockGen. DO NOT EDIT.
// Source: iboard_repository.go

// Package mock_boards is a generated GoMock package.
package mock_boards

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	boards "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/boards"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockIBoardRepository is a mock of IBoardRepository interface.
type MockIBoardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBoardRepositoryMockRecorder
}

// MockIBoardRepositoryMockRecorder is the mock recorder for MockIBoardRepository.
type MockIBoardRepositoryMockRecorder struct {
	mock *MockIBoardRepository
}

// NewMockIBoardRepository creates a new mock instance.
func NewMockIBoardRepository(ctrl *gomock.Controller) *MockIBoardRepository {
	mock := &MockIBoardRepository{ctrl: ctrl}
	mock.recorder = &MockIBoardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBoardRepository) EXPECT() *MockIBoardRepositoryMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockIBoardRepository) AddPost(ctx context.Context, boardUuid uuid.UUID, post boards.Post, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, boardUuid, post, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockIBoardRepositoryMockRecorder) AddPost(ctx, boardUuid, post, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockIBoardRepository)(nil).AddPost), ctx, boardUuid, post, executor)
}

// Delete mocks base method.
func (m *MockIBoardRepository) Delete(ctx context.Context, boardUuid uuid.UUID, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, boardUuid, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBoardRepositoryMockRecorder) Delete(ctx, boardUuid, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBoardRepository)(nil).Delete), ctx, boardUuid, executor)
}

// Find mocks base method.
func (m *MockIBoardRepository) Find(ctx context.Context, boardUuid uuid.UUID, executor db.DbExecutor) (*boards.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, boardUuid, executor)
	ret0, _ := ret[0].(*boards.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIBoardRepositoryMockRecorder) Find(ctx, boardUuid, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIBoardRepository)(nil).Find), ctx, boardUuid, executor)
}

// Save mocks base method.
func (m *MockIBoardRepository) Save(ctx context.Context, board boards.Board, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, board, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIBoardRepositoryMockRecorder) Save(ctx, board, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIBoardRepository)(nil).Save), ctx, board, executor)
}
