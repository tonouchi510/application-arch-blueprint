// Code generated by MockGen. DO NOT EDIT.
// Source: circle_service.go

// Package mock_circles is a generated GoMock package.
package mock_circles

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	circles "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/circles"
	shared "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/shared"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockICircleService is a mock of ICircleService interface.
type MockICircleService struct {
	ctrl     *gomock.Controller
	recorder *MockICircleServiceMockRecorder
}

// MockICircleServiceMockRecorder is the mock recorder for MockICircleService.
type MockICircleServiceMockRecorder struct {
	mock *MockICircleService
}

// NewMockICircleService creates a new mock instance.
func NewMockICircleService(ctrl *gomock.Controller) *MockICircleService {
	mock := &MockICircleService{ctrl: ctrl}
	mock.recorder = &MockICircleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICircleService) EXPECT() *MockICircleServiceMockRecorder {
	return m.recorder
}

// AddNewCircleMember mocks base method.
func (m *MockICircleService) AddNewCircleMember(ctx context.Context, circle *circles.Circle, memberId shared.UserId, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewCircleMember", ctx, circle, memberId, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewCircleMember indicates an expected call of AddNewCircleMember.
func (mr *MockICircleServiceMockRecorder) AddNewCircleMember(ctx, circle, memberId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCircleMember", reflect.TypeOf((*MockICircleService)(nil).AddNewCircleMember), ctx, circle, memberId, executor)
}

// DelegateOwner mocks base method.
func (m *MockICircleService) DelegateOwner(ctx context.Context, circle *circles.Circle, newOwnerId shared.UserId, executor db.DbExecutor) (*circles.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateOwner", ctx, circle, newOwnerId, executor)
	ret0, _ := ret[0].(*circles.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelegateOwner indicates an expected call of DelegateOwner.
func (mr *MockICircleServiceMockRecorder) DelegateOwner(ctx, circle, newOwnerId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateOwner", reflect.TypeOf((*MockICircleService)(nil).DelegateOwner), ctx, circle, newOwnerId, executor)
}

// Exists mocks base method.
func (m *MockICircleService) Exists(ctx context.Context, circle circles.Circle, executor db.DbExecutor) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, circle, executor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockICircleServiceMockRecorder) Exists(ctx, circle, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockICircleService)(nil).Exists), ctx, circle, executor)
}

// LeaveCircleMember mocks base method.
func (m *MockICircleService) LeaveCircleMember(ctx context.Context, circle *circles.Circle, memberId shared.UserId, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveCircleMember", ctx, circle, memberId, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveCircleMember indicates an expected call of LeaveCircleMember.
func (mr *MockICircleServiceMockRecorder) LeaveCircleMember(ctx, circle, memberId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCircleMember", reflect.TypeOf((*MockICircleService)(nil).LeaveCircleMember), ctx, circle, memberId, executor)
}
