// Code generated by MockGen. DO NOT EDIT.
// Source: icircle_repository.go

// Package mock_circles is a generated GoMock package.
package mock_circles

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	circles "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/circles"
	shared "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/shared"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockICircleRepository is a mock of ICircleRepository interface.
type MockICircleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICircleRepositoryMockRecorder
}

// MockICircleRepositoryMockRecorder is the mock recorder for MockICircleRepository.
type MockICircleRepositoryMockRecorder struct {
	mock *MockICircleRepository
}

// NewMockICircleRepository creates a new mock instance.
func NewMockICircleRepository(ctrl *gomock.Controller) *MockICircleRepository {
	mock := &MockICircleRepository{ctrl: ctrl}
	mock.recorder = &MockICircleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICircleRepository) EXPECT() *MockICircleRepositoryMockRecorder {
	return m.recorder
}

// AddCircleMember mocks base method.
func (m *MockICircleRepository) AddCircleMember(ctx context.Context, circle circles.Circle, userId shared.UserId, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCircleMember", ctx, circle, userId, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCircleMember indicates an expected call of AddCircleMember.
func (mr *MockICircleRepositoryMockRecorder) AddCircleMember(ctx, circle, userId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCircleMember", reflect.TypeOf((*MockICircleRepository)(nil).AddCircleMember), ctx, circle, userId, executor)
}

// Delete mocks base method.
func (m *MockICircleRepository) Delete(ctx context.Context, circle circles.Circle, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, circle, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICircleRepositoryMockRecorder) Delete(ctx, circle, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICircleRepository)(nil).Delete), ctx, circle, executor)
}

// Find mocks base method.
func (m *MockICircleRepository) Find(ctx context.Context, id uuid.UUID, executor db.DbExecutor) (*circles.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id, executor)
	ret0, _ := ret[0].(*circles.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockICircleRepositoryMockRecorder) Find(ctx, id, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICircleRepository)(nil).Find), ctx, id, executor)
}

// FindByName mocks base method.
func (m *MockICircleRepository) FindByName(ctx context.Context, name circles.CircleName, executor db.DbExecutor) (*circles.Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name, executor)
	ret0, _ := ret[0].(*circles.Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockICircleRepositoryMockRecorder) FindByName(ctx, name, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockICircleRepository)(nil).FindByName), ctx, name, executor)
}

// RemoveCircleMember mocks base method.
func (m *MockICircleRepository) RemoveCircleMember(ctx context.Context, circle circles.Circle, userId shared.UserId, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCircleMember", ctx, circle, userId, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCircleMember indicates an expected call of RemoveCircleMember.
func (mr *MockICircleRepositoryMockRecorder) RemoveCircleMember(ctx, circle, userId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCircleMember", reflect.TypeOf((*MockICircleRepository)(nil).RemoveCircleMember), ctx, circle, userId, executor)
}

// Save mocks base method.
func (m *MockICircleRepository) Save(ctx context.Context, circle circles.Circle, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, circle, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICircleRepositoryMockRecorder) Save(ctx, circle, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICircleRepository)(nil).Save), ctx, circle, executor)
}
