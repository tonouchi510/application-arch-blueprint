// Code generated by MockGen. DO NOT EDIT.
// Source: icircle_permission_repository.go

// Package mock_permissions is a generated GoMock package.
package mock_permissions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	permissions "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/permissions"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockICirclePermissionRepository is a mock of ICirclePermissionRepository interface.
type MockICirclePermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICirclePermissionRepositoryMockRecorder
}

// MockICirclePermissionRepositoryMockRecorder is the mock recorder for MockICirclePermissionRepository.
type MockICirclePermissionRepositoryMockRecorder struct {
	mock *MockICirclePermissionRepository
}

// NewMockICirclePermissionRepository creates a new mock instance.
func NewMockICirclePermissionRepository(ctrl *gomock.Controller) *MockICirclePermissionRepository {
	mock := &MockICirclePermissionRepository{ctrl: ctrl}
	mock.recorder = &MockICirclePermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICirclePermissionRepository) EXPECT() *MockICirclePermissionRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockICirclePermissionRepository) Find(ctx context.Context, circleId uuid.UUID, executor db.DbExecutor) (*permissions.CirclePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, circleId, executor)
	ret0, _ := ret[0].(*permissions.CirclePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockICirclePermissionRepositoryMockRecorder) Find(ctx, circleId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICirclePermissionRepository)(nil).Find), ctx, circleId, executor)
}

// Save mocks base method.
func (m *MockICirclePermissionRepository) Save(ctx context.Context, permission *permissions.CirclePermission, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, permission, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICirclePermissionRepositoryMockRecorder) Save(ctx, permission, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICirclePermissionRepository)(nil).Save), ctx, permission, executor)
}
