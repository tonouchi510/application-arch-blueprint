// Code generated by MockGen. DO NOT EDIT.
// Source: iuser_repository.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/domain/models/users"
	db "github.com/tonouchi510/application-arch-blueprint/circle-service/internal/shared/db"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIUserRepository) Delete(ctx context.Context, userId users.UserId, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserRepositoryMockRecorder) Delete(ctx, userId, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserRepository)(nil).Delete), ctx, userId, executor)
}

// Find mocks base method.
func (m *MockIUserRepository) Find(ctx context.Context, id users.UserId, executor db.DbExecutor) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id, executor)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIUserRepositoryMockRecorder) Find(ctx, id, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIUserRepository)(nil).Find), ctx, id, executor)
}

// FindByName mocks base method.
func (m *MockIUserRepository) FindByName(ctx context.Context, name users.UserName, executor db.DbExecutor) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name, executor)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockIUserRepositoryMockRecorder) FindByName(ctx, name, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIUserRepository)(nil).FindByName), ctx, name, executor)
}

// Save mocks base method.
func (m *MockIUserRepository) Save(ctx context.Context, user users.User, executor db.DbExecutor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user, executor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIUserRepositoryMockRecorder) Save(ctx, user, executor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUserRepository)(nil).Save), ctx, user, executor)
}
